{"ast":null,"code":"import { HttpRequest } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class GroupServiceService {\n  getTodos(id) {\n    let url = this.baseUrl + \"/assignments/todo/\" + id;\n    return this.http.get(url);\n  }\n  submitFile(currentFile, assignId, id) {\n    const formData = new FormData();\n    formData.append('file', currentFile);\n    let url = this.baseUrl + \"/assignments/submit/\" + assignId + \"/\" + id;\n    const req = new HttpRequest('POST', url, formData, {\n      reportProgress: true,\n      responseType: 'json'\n    });\n    return this.http.request(req);\n  }\n  editAnswer(answerId, answerName) {\n    let url = this.baseUrl + '/answers/editAnswer/' + answerId;\n    return this.http.patch(url, answerName);\n  }\n  upload(file, groupId) {\n    const formData = new FormData();\n    formData.append('file', file);\n    let url = this.baseUrl + \"/files/upload/\" + groupId;\n    const req = new HttpRequest('POST', url, formData, {\n      reportProgress: true,\n      responseType: 'json'\n    });\n    return this.http.request(req);\n  }\n  getFiles(groupId) {\n    return this.http.get(`${this.baseUrl}/files/${groupId}`);\n  }\n  deleteAnswer(answerId) {\n    let url = this.baseUrl + '/answers/delAnswer/' + answerId;\n    return this.http.delete(url);\n  }\n  getAnswers(questionId) {\n    let url = this.baseUrl + '/answers/getAnswers/' + questionId;\n    return this.http.get(url);\n  }\n  deleteQuestion(questionId) {\n    let url = this.baseUrl + '/questions/delQuestion/' + questionId;\n    return this.http.delete(url);\n  }\n  editQuestion(questionId, questionName) {\n    let url = this.baseUrl + '/questions/editQuestion/' + questionId;\n    return this.http.patch(url, questionName);\n  }\n  addAnswer(ans) {\n    let url = this.baseUrl + '/answers/create';\n    return this.http.post(url, ans);\n  }\n  addQuestion(ques) {\n    let url = this.baseUrl + '/questions/create';\n    return this.http.post(url, ques);\n  }\n  getQuestions(groupId) {\n    let url = this.baseUrl + '/questions/getQuestion/' + groupId;\n    return this.http.get(url);\n  }\n  constructor(http, route, router) {\n    this.http = http;\n    this.route = route;\n    this.router = router;\n    this.baseUrl = 'http://localhost:9091/elearning/api/groups';\n  }\n  getPeopleData(groupId) {\n    let url = \"\" + groupId;\n    return this.http.get(url);\n  }\n  getAssignments(groupId) {\n    let url = this.baseUrl + \"/assignments/get/\" + groupId;\n    return this.http.get(url);\n  }\n  postAssignment(groupId, assign) {\n    let url = this.baseUrl + \"/assignments/post/\" + groupId;\n    return this.http.post(url, assign);\n  }\n}\nGroupServiceService.ɵfac = function GroupServiceService_Factory(t) {\n  return new (t || GroupServiceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ActivatedRoute), i0.ɵɵinject(i2.Router));\n};\nGroupServiceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: GroupServiceService,\n  factory: GroupServiceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpRequest","GroupServiceService","getTodos","id","url","baseUrl","http","get","submitFile","currentFile","assignId","formData","FormData","append","req","reportProgress","responseType","request","editAnswer","answerId","answerName","patch","upload","file","groupId","getFiles","deleteAnswer","delete","getAnswers","questionId","deleteQuestion","editQuestion","questionName","addAnswer","ans","post","addQuestion","ques","getQuestions","constructor","route","router","getPeopleData","getAssignments","postAssignment","assign","factory","providedIn"],"sourceRoot":"","sources":["/Users/KO20422228/Documents/frontend-els/ELS_UI/src/app/services/group-service.service.ts"],"sourcesContent":["import { HttpClient, HttpEvent, HttpRequest } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { Group } from 'src/model/group';\nimport { RegisterUser } from 'src/model/RegisterUser.model';\nimport { Answer } from '../../model/answer';\nimport { Assignments } from '../../model/assignments';\nimport { Question } from '../../model/question';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class GroupServiceService {\n  getTodos(id:number) :Observable<any>{\n    let url=this.baseUrl+\"/assignments/todo/\"+id;\n    return this.http.get(url);\n  }\n  submitFile(currentFile: File, assignId: number, id: number) :Observable<HttpEvent<any>>{\n    const formData: FormData = new FormData();\n\n    formData.append('file', currentFile);\n    let url=this.baseUrl+\"/assignments/submit/\"+assignId+\"/\"+id;\n\n    const req = new HttpRequest('POST',url, formData, {\n      reportProgress: true,\n      responseType: 'json'\n    });\n\n    return this.http.request(req);\n  }\n  editAnswer(answerId: number, answerName: any) {\n    let url=this.baseUrl+'/answers/editAnswer/'+answerId;\n  return this.http.patch(url,answerName);\n  }\n\n  upload(file: File,groupId:number): Observable<HttpEvent<any>> {\n    const formData: FormData = new FormData();\n\n    formData.append('file', file);\n    let url=this.baseUrl+\"/files/upload/\"+groupId;\n\n    const req = new HttpRequest('POST',url, formData, {\n      reportProgress: true,\n      responseType: 'json'\n    });\n\n    return this.http.request(req);\n  }\n\n  getFiles(groupId:number): Observable<any> {\n    return this.http.get(`${this.baseUrl}/files/${groupId}`);\n  }\n  deleteAnswer(answerId: number):Observable<any>{\n    let url=this.baseUrl+'/answers/delAnswer/'+answerId;\n   return this.http.delete(url);\n  }\n  getAnswers(questionId: number) :Observable<any> {\n    let url=this.baseUrl+'/answers/getAnswers/'+questionId;\n    return this.http.get(url);\n  }\n  deleteQuestion(questionId: number) :Observable<any>{\n   let url=this.baseUrl+'/questions/delQuestion/'+questionId;\n   return this.http.delete(url);\n  }\n  editQuestion(questionId: number, questionName: string):Observable<any> {\n  let url=this.baseUrl+'/questions/editQuestion/'+questionId;\n  return this.http.patch(url,questionName);\n  }\n  addAnswer(ans: Answer) :Observable<any> {\n   let url=this.baseUrl+'/answers/create';\n   return this.http.post(url,ans);\n  }\n  addQuestion(ques: Question):Observable<any> {\n   let url=this.baseUrl+'/questions/create';\n   return this.http.post(url,ques);\n  }\n  getQuestions(groupId: number) :Observable<any>{\n    let url=this.baseUrl+'/questions/getQuestion/'+groupId;\n    return this.http.get(url);\n  }\n\n  private baseUrl='http://localhost:9091/elearning/api/groups';\n  constructor(private http:HttpClient,private route:ActivatedRoute,private router:Router) { }\n\n  getPeopleData(groupId: number):Observable<RegisterUser[]> {\n    let url=\"\"+groupId;\n    return this.http.get<RegisterUser[]>(url);\n  }\n\n  getAssignments(groupId:number):Observable<any>{\n    let url=this.baseUrl+\"/assignments/get/\"+groupId;\n    return this.http.get(url);\n  }\n\n  postAssignment(groupId:number,assign:Assignments):Observable<any>{\n    let url=this.baseUrl+\"/assignments/post/\"+groupId;\n    return this.http.post(url,assign);\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}