{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport class MainserviceService {\n  getUsers(val) {\n    let url = this.baseUrl + 'search/' + val;\n    return this.http.get(url);\n  }\n  editDetails(user, id) {\n    let url = this.baseUrl + 'editName/' + id;\n    return this.http.put(url, user);\n  }\n  editInterest(selectedItems, id) {\n    let url = this.baseUrl + 'editInterest/' + id;\n    return this.http.put(url, selectedItems);\n  }\n  updateMode(id, val) {\n    let url = this.baseUrl + 'editMode/' + id;\n    return this.http.patch(url, val);\n  }\n  checkMode(id) {\n    let url = this.baseUrl + 'checkMode/' + id;\n    return this.http.get(url);\n  }\n  saveMode(id, mode) {\n    let url = this.baseUrl + 'createMode/' + id;\n    return this.http.post(url, mode);\n  }\n  getInterestData(id) {\n    let url = this.baseUrl + 'getInterests/' + id;\n    return this.http.get(url);\n  }\n  getUser(id) {\n    let url = this.baseUrl + 'userData/' + id;\n    return this.http.get(url);\n  }\n  saveInterest(selectedItems, id) {\n    let url = this.baseUrl + 'saveInterest/' + id;\n    return this.http.post(url, selectedItems);\n  }\n  editPassword(npwd, userId) {\n    let url = this.baseUrl + 'changePassword/' + userId;\n    return this.http.patch(url, npwd);\n  }\n  logout() {\n    localStorage.removeItem('token');\n    return true;\n  }\n  constructor(http, route, router) {\n    this.http = http;\n    this.route = route;\n    this.router = router;\n    this.baseUrl = 'http://localhost:8098/elearning/api/main/';\n  }\n  login(log) {\n    let url = this.baseUrl + 'login';\n    return this.http.post(url, log);\n  }\n  loginUserFromRemote(log) {\n    localStorage.setItem(\"username\", log.userName);\n    let url = this.baseUrl + 'login';\n    return this.http.post(url, log);\n  }\n  getUserData(userName) {\n    let url = this.baseUrl + 'user/' + userName;\n    return this.http.get(url);\n  }\n  getInterest(userId) {\n    let url = this.baseUrl + 'interest/' + userId;\n    return this.http.get(url);\n  }\n  logUser(token) {\n    localStorage.setItem(\"token\", token);\n    return true;\n  }\n  registerUserFromRemote(reg) {\n    let url = this.baseUrl + 'signup';\n    return this.http.post(url, reg);\n  }\n  getToken() {\n    return localStorage.getItem(\"token\");\n  }\n  isLoggedIn() {\n    let token = localStorage.getItem(\"token\");\n    if (token == undefined || token === '' || token == null) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n}\nMainserviceService.ɵfac = function MainserviceService_Factory(t) {\n  return new (t || MainserviceService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ActivatedRoute), i0.ɵɵinject(i2.Router));\n};\nMainserviceService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: MainserviceService,\n  factory: MainserviceService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["MainserviceService","getUsers","val","url","baseUrl","http","get","editDetails","user","id","put","editInterest","selectedItems","updateMode","patch","checkMode","saveMode","mode","post","getInterestData","getUser","saveInterest","editPassword","npwd","userId","logout","localStorage","removeItem","constructor","route","router","login","log","loginUserFromRemote","setItem","userName","getUserData","getInterest","logUser","token","registerUserFromRemote","reg","getToken","getItem","isLoggedIn","undefined","factory","providedIn"],"sourceRoot":"","sources":["/Users/KO20422228/Documents/frontend-els/ELS_UI/src/app/services/mainservice.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { Observable } from 'rxjs';\nimport { LoginUser } from 'src/model/LoginUser.model';\n// import { Login } from '../login';\nimport { RegUser } from '../../model/reg-user';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class MainserviceService {\n  getUsers(val: string):Observable<any> {\n   let url=this.baseUrl+'search/'+val;\n   return this.http.get(url);\n  }\n  editDetails(user: any,id:number) :Observable<any>{\n   let url=this.baseUrl+'editName/'+id;\n   return this.http.put(url,user);\n  }\n  editInterest(selectedItems: Array<number>, id: any):Observable<any> {\n    let url=this.baseUrl+'editInterest/'+id;\n    return this.http.put(url,selectedItems);\n  }\n  updateMode(id: any, val: any) :Observable<any>{\n   let url=this.baseUrl+'editMode/'+id;\n   return this.http.patch(url,val);\n  }\n  checkMode(id: number):Observable<any>{\n    let url=this.baseUrl+'checkMode/'+id;\n    return this.http.get(url);\n  }\n  saveMode(id:number,mode: number) {\n    let url=this.baseUrl+'createMode/'+id;\n    return this.http.post(url,mode);\n    \n  }\n  getInterestData(id:number):Observable<any> {\n    let url=this.baseUrl+'getInterests/'+id;\n    return this.http.get(url);\n  }\n  getUser(id: number) {\n    let url=this.baseUrl+'userData/'+id;\n    return this.http.get(url);\n  }\n  saveInterest(selectedItems: Array<number>, id: number) :Observable<any>{\n    let url=this.baseUrl+'saveInterest/'+id;\n    return this.http.post(url,selectedItems);\n  }\n  \n  public editPassword(npwd:string,userId:number):Observable<any>{\n    let url=this.baseUrl+'changePassword/'+userId;\n    return this.http.patch(url,npwd);\n  }\n  \n\n  logout() {\n    localStorage.removeItem('token');\n    return true;\n  }\n\n  private baseUrl='http://localhost:8098/elearning/api/main/';\n  constructor(private http:HttpClient,private route:ActivatedRoute,private router:Router) { }\n\n  login(log:LoginUser):Observable<any>{\n    let url=this.baseUrl+'login';\n    return this.http.post(url,log);\n\n\n  }\n  public loginUserFromRemote(log:LoginUser):Observable<any>{\n    localStorage.setItem(\"username\",log.userName);\n    let url=this.baseUrl+'login';\n    return this.http.post(url,log);\n\n\n\n  }\n\n  public getUserData(userName: string) :Observable<any> {\n    let url=this.baseUrl+'user/'+userName;\n    return this.http.get(url);\n\n  }\n\n  public getInterest(userId: number) :Observable<any> {\n    let url=this.baseUrl+'interest/'+userId;\n    return this.http.get(url);\n\n  }\n  logUser(token : any){\n    localStorage.setItem(\"token\",token);\n    return true;\n  }\n  public registerUserFromRemote(reg:RegUser):Observable<any>{\n    let url=this.baseUrl+'signup';\n    return this.http.post(url,reg);\n  }\n\n  getToken(){\n    return localStorage.getItem(\"token\")\n  }\n  \n  isLoggedIn(){\n    let token = localStorage.getItem(\"token\");\n  if(token==undefined || token === '' || token == null){\n    return false;\n  }\n  else{\n    return true;\n  }\n  }\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}